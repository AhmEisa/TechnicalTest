/*
Deployment script for GETDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "GETDb"
:setvar DefaultFilePrefix "GETDb"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Role]...';


GO
CREATE TABLE [dbo].[Role] (
    [Id]        INT            NOT NULL,
    [Name]      NVARCHAR (256) NOT NULL,
    [IsDeleted] BIT            NOT NULL,
    CONSTRAINT [PK_Role] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Service]...';


GO
CREATE TABLE [dbo].[Service] (
    [Id]        UNIQUEIDENTIFIER NOT NULL,
    [Name]      NVARCHAR (50)    NOT NULL,
    [IsDeleted] BIT              NOT NULL,
    CONSTRAINT [PK_Service] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ServiceRequest]...';


GO
CREATE TABLE [dbo].[ServiceRequest] (
    [Id]           UNIQUEIDENTIFIER                            NOT NULL,
    [UserId]       UNIQUEIDENTIFIER                            NOT NULL,
    [ServiceId]    UNIQUEIDENTIFIER                            NOT NULL,
    [StatusId]     INT                                         NOT NULL,
    [CreationDate] DATETIME                                    NOT NULL,
    [CreatedBy]    NVARCHAR (50)                               NOT NULL,
    [UpdateDate]   DATETIME                                    NULL,
    [UpdatedBy]    NVARCHAR (50)                               NULL,
    [IsDeleted]    BIT                                         NOT NULL,
    [SysStartTime] DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [SysEndTime]   DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    CONSTRAINT [PK_ServiceRequest] PRIMARY KEY CLUSTERED ([Id] ASC),
    PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime])
);


GO
PRINT N'Creating [dbo].[ServiceStatus]...';


GO
CREATE TABLE [dbo].[ServiceStatus] (
    [Id]        INT            NOT NULL,
    [Name]      NVARCHAR (256) NOT NULL,
    [IsDeleted] BIT            NOT NULL,
    CONSTRAINT [PK_ServiceStatus] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [Id]           UNIQUEIDENTIFIER NOT NULL,
    [Email]        NVARCHAR (256)   NOT NULL,
    [PasswordHash] NVARCHAR (MAX)   NOT NULL,
    [FirstName]    NVARCHAR (50)    NOT NULL,
    [LastName]     NVARCHAR (50)    NOT NULL,
    [IsDeleted]    BIT              NOT NULL,
    CONSTRAINT [PK_User] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UserRole]...';


GO
CREATE TABLE [dbo].[UserRole] (
    [Id]        UNIQUEIDENTIFIER NOT NULL,
    [UserId]    UNIQUEIDENTIFIER NOT NULL,
    [RoleId]    INT              NOT NULL,
    [IsDeleted] BIT              NOT NULL,
    CONSTRAINT [PK_UserRole] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[Role]...';


GO
ALTER TABLE [dbo].[Role]
    ADD DEFAULT (0) FOR [IsDeleted];


GO
PRINT N'Creating unnamed constraint on [dbo].[ServiceRequest]...';


GO
ALTER TABLE [dbo].[ServiceRequest]
    ADD DEFAULT (GETDATE()) FOR [CreationDate];


GO
PRINT N'Creating unnamed constraint on [dbo].[ServiceRequest]...';


GO
ALTER TABLE [dbo].[ServiceRequest]
    ADD DEFAULT (0) FOR [IsDeleted];


GO
PRINT N'Creating unnamed constraint on [dbo].[ServiceStatus]...';


GO
ALTER TABLE [dbo].[ServiceStatus]
    ADD DEFAULT (0) FOR [IsDeleted];


GO
PRINT N'Creating unnamed constraint on [dbo].[User]...';


GO
ALTER TABLE [dbo].[User]
    ADD DEFAULT (0) FOR [IsDeleted];


GO
PRINT N'Creating unnamed constraint on [dbo].[UserRole]...';


GO
ALTER TABLE [dbo].[UserRole]
    ADD DEFAULT (0) FOR [IsDeleted];


GO
PRINT N'Creating [dbo].[FK_ServiceRequest_User]...';


GO
ALTER TABLE [dbo].[ServiceRequest]
    ADD CONSTRAINT [FK_ServiceRequest_User] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating [dbo].[FK_ServiceRequest_Service]...';


GO
ALTER TABLE [dbo].[ServiceRequest]
    ADD CONSTRAINT [FK_ServiceRequest_Service] FOREIGN KEY ([ServiceId]) REFERENCES [dbo].[Service] ([Id]);


GO
PRINT N'Creating [dbo].[FK_ServiceRequest_ServiceStatus]...';


GO
ALTER TABLE [dbo].[ServiceRequest]
    ADD CONSTRAINT [FK_ServiceRequest_ServiceStatus] FOREIGN KEY ([StatusId]) REFERENCES [dbo].[ServiceStatus] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UserRole_Role_RoleId]...';


GO
ALTER TABLE [dbo].[UserRole]
    ADD CONSTRAINT [FK_UserRole_Role_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Role] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_UserRole_User_UserId]...';


GO
ALTER TABLE [dbo].[UserRole]
    ADD CONSTRAINT [FK_UserRole_User_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]) ON DELETE CASCADE;


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a5b242cd-eb6d-4f54-b26b-3e96375dade0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a5b242cd-eb6d-4f54-b26b-3e96375dade0')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF NOT EXISTS(SELECT * FROM [dbo].[ServiceStatus] WHERE Id=1)
INSERT INTO [dbo].[ServiceStatus] (Id,[Name],IsDeleted) VALUES (1,N'InProgress',0)

IF NOT EXISTS(SELECT * FROM [dbo].[ServiceStatus] WHERE Id=2)
INSERT INTO [dbo].[ServiceStatus] (Id,[Name],IsDeleted) VALUES (2,N'Approved',0)

IF NOT EXISTS(SELECT * FROM [dbo].[ServiceStatus] WHERE Id=3)
INSERT INTO [dbo].[ServiceStatus] (Id,[Name],IsDeleted) VALUES (3,N'Rejected',0)


IF NOT EXISTS(SELECT * FROM [dbo].[SERVICE] WHERE Id='80D9F272-83E3-4EC7-B50C-CBEF3D0A96E0')
INSERT INTO [dbo].[Service] (Id,[Name],IsDeleted) VALUES ('80D9F272-83E3-4EC7-B50C-CBEF3D0A96E0',N'A',0)

IF NOT EXISTS(SELECT * FROM [dbo].[SERVICE] WHERE Id='C2EB4AC3-3B11-418C-A143-D3295A97C224')
INSERT INTO [dbo].[Service] (Id,[Name],IsDeleted) VALUES ('C2EB4AC3-3B11-418C-A143-D3295A97C224',N'B',0)

IF NOT EXISTS(SELECT * FROM [dbo].[SERVICE] WHERE Id='3CC2C557-8FE8-47F5-80E7-9F731485CF45')
INSERT INTO [dbo].[Service] (Id,[Name],IsDeleted) VALUES ('3CC2C557-8FE8-47F5-80E7-9F731485CF45',N'C',0)

IF NOT EXISTS(SELECT * FROM [dbo].[SERVICE] WHERE Id='C0658BD6-2CDD-41D5-A6B3-EAA9584BF78C')
INSERT INTO [dbo].[Service] (Id,[Name],IsDeleted) VALUES ('C0658BD6-2CDD-41D5-A6B3-EAA9584BF78C',N'D',0)







IF NOT EXISTS(SELECT * FROM [dbo].[Role] WHERE Id=1)
INSERT INTO dbo.Role
(
    Id,
    Name,
    IsDeleted
)
VALUES (1,N'Admin',0)

IF NOT EXISTS(SELECT * FROM [dbo].[User] WHERE Id='7359A2D7-2E0F-4DFF-A39E-A62B5381F0F4')
INSERT INTO dbo.[User]
(
    Id,
    Email,
    PasswordHash,
    FirstName,
    LastName,
    IsDeleted
)
VALUES
(   '7359A2D7-2E0F-4DFF-A39E-A62B5381F0F4', -- Id 
    N'aeisa@gmail.com',  -- Email 
    N'GPQxRNDwC+5WLoZr/pNKJg== 74BEcbVlsVI+fdIKmGN0fogbhtBN0SECe7JitTLjto0=',  -- Password 12345
    N'Ahmed',  -- FirstName
    N'Eisa',  -- LastName 
    0  -- IsDeleted 
    )

IF NOT EXISTS(SELECT * FROM dbo.UserRole WHERE UserId='7359A2D7-2E0F-4DFF-A39E-A62B5381F0F4' AND RoleId=1)
INSERT INTO dbo.UserRole
(
    Id,
    UserId,
    RoleId,
	IsDeleted
)
VALUES (NEWID(),'7359A2D7-2E0F-4DFF-A39E-A62B5381F0F4' ,1, 0)

ALTER TABLE [dbo].ServiceRequest SET (SYSTEM_VERSIONING = ON);


GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
